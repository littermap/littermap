// npm run test -- --coverage
let predict = require('./predict');
let fetchMock = require('jest-fetch-mock');
fetchMock.enableMocks();
beforeEach(() => {
  fetch.resetMocks();
});

test('readTagWeights returns a map', () => {
  expect(predict.readTagWeights()).toBeInstanceOf(Map); // with format [string, [number, number]]
});

test('calculateWeights empty matrix', () => {
  expect(predict.calculateWeights(null, 
    [new Map(), new Map(), new Map(), new Map(), new Map(), 
      new Map(), new Map(), new Map(), new Map(), new Map(), 
      new Map(), new Map(), new Map(), new Map(), new Map(), 
      new Map(), new Map(), new Map(), new Map(), new Map(), 
      new Map(), new Map(), new Map(), new Map(), new Map()],  
    5, 5, 5, 5)).toStrictEqual(
      [0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0]);
});

test('calculateWeights zero frequency matrix', () => {
  expect(predict.calculateWeights(null, 
    [new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]])],  
    5, 5, 5, 5)).toStrictEqual(
      [0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0]);
});

test('calculateWeights sparse matrix', () => {
  expect(predict.calculateWeights(null, 
    [new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]])],  
    5, 5, 5, 5)).toStrictEqual(
      [0.2928932188134524, 0.5, 0.2928932188134524, 0, 0, 
      0.5, 1, 0.5, 0, 0, 
      0.2928932188134524, 0.5, 0.2928932188134524, 0, 0, 
      0, 0, 0.2928932188134524, 0.5, 0.2928932188134524, 
      0, 0, 0.5, 1, 0.5]);
});

test('calculateWeights dense matrix', () => {
  expect(predict.calculateWeights(null, 
    [new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 1]]),
    new Map([["a", 1]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 1]]), new Map([["a", 1]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 1]]),
    new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 1]]), new Map([["a", 0]])],  
    5, 5, 5, 5)).toStrictEqual(
      [0.44912716005788034,   0.622817900144701, 0.5508728399421197,  0.6947629603472821, 0.622817900144701, 
       0.622817900144701, 0.7965086402315215,  0.7245635800289402, 0.7245635800289402, 0.44912716005788034,
       0.5508728399421197,  0.8263092599131795, 0.8263092599131793,  0.5508728399421197, 0.2754364199710598, 
       0.6947629603472821, 1, 0.970199380318342, 0.7245635800289402, 0.44912716005788034,
       0.622817900144701,  0.7245635800289402, 0.7965086402315215,  0.7245635800289402, 0.34738148017364107]);
});

test('calculateWeights overlapping matrix', () => {
  expect(predict.calculateWeights(null, 
    [new Map([["a", 2]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 5]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 0]]),
    new Map([["a", 0]]), new Map([["a", 0]]), new Map([["a", 3]]), new Map([["a", 0]]), new Map([["a", 3]]),
    new Map([["a", 0]]), new Map([["a", 3]]), new Map([["a", 0]]), new Map([["a", 1]]), new Map([["a", 0]])],  
    5, 5, 5, 5)).toStrictEqual(
      [0.45857864376269053, 0.3, 0.5585786437626905, 1, 0.5, 
       0.3, 0.31715728752538097, 0.39289321881345246, 0.5, 0.2928932188134524,
       0.05857864376269049, 0.27573593128807145, 0.3585786437626905, 0.35147186257614293, 0.3, 
       0.17573593128807147, 0.6,  0.8343145750507619, 0.7,  0.6585786437626905,
       0.3, 0.7757359312880714, 0.7,  0.5514718625761429, 0.4]);
});

/*
test('getWeights node locations', () => {
  return predict.getWeights(-79.06135330561732, 35.913853881435465, -79.03998146418665, 35.901903477007835, 60).then(data => {
    expect(data).toStrictEqual(new Array(304.74917061741735, 586.0222945765863, 700.0073964820747, 654.788275860818, 581.1470067888636, 568.815187795399, 571.8410537094536, 346.08474041710036, 272.1141776686229, 272.3334777586293, 201.806565824048, 166.82738110421963, 190.63246763185265, 159.454798102189, 72.50252531694166, 19.908116907963212, 4.01471862576143, 5.893398282201786, 24.272077938642152, 32.60050506338834, 417.64004358267795, 737.3116164579304, 1061.87702089128, 1257.5248198935342, 913.1734854475565, 639.5237738730003, 554.0334418648794, 367.84862966027947, 346.47456736183335, 392.3202384292829, 340.5334418648792, 330.15728752538064, 362.77608255199823, 300.05425714505054, 180.0725471082804, 87.46089475659907, 25.452272785247498, 20.09440840897846, 55.044155877284275, 55.594408408978474, 579.147619533502, 905.2468991076137, 1248.6926419625645, 1192.1079015454782, 622.8566388869916, 339.1253249569162, 344.05930777893343, 298.3557723352154, 343.33495705504436, 394.4892859875946, 385.5187232391179, 401.2258300203045, 434.4217895131975, 382.9034995499685, 287.64361492014604, 195.79794385269668, 102.8126624784583, 72.38120497338201, 84.18881681795689, 55.857864376269056, 779.4461761308373, 1056.0359671818217, 1237.3963568750369, 750.8776336359135, 194.43798743537425, 161.63499294879415, 282.3385283925125, 356.3887809242066, 378.3202384292823, 382.67200615114166, 350.2760825519985, 324.1511908709704, 340.8202384292826, 351.62785027385803, 315.5664504538704, 243.0370132023476, 162.0674964743971, 119.25988462982234, 73.28679656440352, 32.35176772185916, 543.2060607606595, 679.3692654716999, 607.5222945765861, 384.34906293616723, 99.54668119422593, 120.23297269524113, 245.72687604083117, 364.8029944865797, 368.76136392623715, 364.261363926237, 366.64866555402875, 334.3522009977472, 381.86082296909893, 441.11565696503766, 348.92326880961303, 189.87153698150365, 134.0639251369289, 108.46089475659906, 59.63246763185293, 18.115223689149758, 171.73044737829935, 144.83852839251287, 91.94007947642777, 94.81013716151651, 85.54058453981597, 93.61774900609142, 176.36186898962558, 272.4009742330266, 329.3141417748729, 375.32276374622455, 411.40959620437764, 511.7506499138321, 681.3263350836926, 674.7334059711286, 383.80299448657956, 160.00757595082493, 92.87510831897201, 76.54415587728428, 53.2867965644036, 24.63603896932107, 82.95836943965735, 80.84567106744929, 82.41064222490483, 81.05887450304569, 78.36038969321069, 85.10912703473983, 129.06139981998726, 223.44007947642768, 279.6080810142131, 313.0222945765861, 366.36796564403545, 518.1720061511418, 720.4613280324871, 598.1694808342002, 311.127850273858, 149.0822151001586, 79.10303038032991, 53.58831175456862, 49.29541853575514, 32.42283553372467, 61.83704909609775, 83.08221510015862, 84.10912703473981, 78.74516600406086, 66.75988462982242, 77.06749647439727, 142.50757595082493, 208.4426047933692, 206.51010126776632, 223.58369439657378, 265.36544032709355, 320.79837712858495, 357.01619792217616, 290.46489936995556, 153.14361492014586, 90.46089475659899, 64.37510831897215, 60.30151519016499, 59.387301627791906, 34.52943725152286, 45.1507575950825, 71.35176772185906, 63.83095244168788, 49.88730162779192, 42.2806999099937, 85.92536085066617, 174.13246763185282, 197.398448916085, 180.4070708874366, 219.04920651116757, 228.29184719828686, 146.58474041710033, 105.92788616760794, 110.39592359914339, 74.28322522693537, 37.251262658470864, 51.33704909609774, 71.1446609406726, 63.33704909609775, 30.079689783217027, 39.28069990999369, 55.23044737829956, 56.41064222490491, 65.7537879754125, 75.39592359914344, 114.51976925964475, 185.32738110421948, 197.05530316557727, 195.0075759508247, 262.69639276878166, 254.68272016354683, 126.8801589528554, 59.29541853575511, 103.881204973382, 88.57359312880706, 43.15328291202418, 33.887301627791935, 40.301515190165, 36.37258300203048, 19.029437251522857, 38.85176772185918, 78.52334059711299, 135.67914882607863, 183.10303038032998, 170.51367260523463, 132.6202743230329, 152.63856428626258, 179.21468273201137, 173.04920651116743, 281.9268401470813, 345.53448788540607, 182.27355723505724, 57.57611844574881, 113.91673887931472, 133.03196256846448, 68.6740981921955, 19.97918471982871, 15.78679656440357, 14.343145750507617, 8.272077938642143, 41.70101012677667, 95.69491347236674, 174.83095244168783, 240.46089475659898, 176.89592359914346, 106.46089475659902, 129.31266247845818, 191.10808101421324, 242.27355723505715, 362.83748237198637, 435.829906421161, 256.37406229844555, 75.59083707151021, 136.22077938642136, 197.56139981998712, 128.02839123099625, 43.739069349651096, 30.57968978321702, 27.68019484660536, 13.393398282201787, 41.552777848635834, 69.38730162779193, 106.00147929641503, 116.96699141100888, 86.97813869930216, 60.48171003677042, 104.56139981998732, 210.13246763185273, 314.53448788540567, 369.35324701827403, 358.647186257614, 235.05173182810935, 112.09083707151015, 193.9781386993021, 277.5258659140546, 179.3629150101523, 64.92283553372464, 48.257359312880716, 41.600505063388354, 24.257359312880716, 32.75735931288071, 48.12994231491121, 33.014718625761425, 21.16547622084394, 36.86648634762064, 53.922835533724665, 97.76240994676397, 177.82128444980967, 211.8360030755712, 195.6314216113263, 170.81518779539988, 130.95479810218907, 117.31266247845821, 205.13499294879446, 257.875108318972, 150.13499294879452, 43.60303038033001, 28.579689783217027, 26.68019484660537, 19.393398282201787, 16.20101012677667, 25.39339828220179, 22.579689783217024, 16.443650813895953, 41.85786437626906, 87.2390693496511, 120.94617613083756, 141.74159466659268, 111.61165235168158, 70.96951672795062, 65.55277784863586, 87.1974387893084, 109.16190488337553, 154.80046916963843, 178.02839123099602, 118.39844891608507, 45.68272016354703, 17.893398282201783, 14.422835533724644, 12, 1.8786796564403576, 7.100505063388335, 11.636038969321069, 13.479184719828691, 33.15937956643407, 91.1446609406726, 144.91926419625622, 148.6532829120242, 166.5578284825192, 186.89235226167511, 166.87763363591378, 124.89235226167519, 114.8309524416878, 125.83957441303939, 145.1888168179567, 150.5674964743971, 92.78069990999367, 37.7010101267767, 16.13603896932107, 9.5, 1.5, 3.878679656440357, 6, 16.25126265847084, 31.06497115745561, 73.2685066011739, 108.87258300203044, 127.58474041710024, 196.87510831897214, 319.54920651116754, 298.22687604083114, 165.38373029032357, 115.312662478458, 118.25378797541234, 128.2918471982868, 140.9964286625315, 105.78932188134522, 40.26598128423231, 9.408116907963212, 4, 12.150757595082503, 17.529437251522857, 15.665476220843928, 26.493903345590144, 47.4583694396574, 59.62384566050136, 65.67409819219552, 70.15328291202421, 132.2710319181155, 249.29437251522845, 280.1791488260786, 201.92431483013968, 124.03196256846435, 107.02586591405452, 95.86038969321066, 94.89592359914334, 78.55277784863577, 29.008621971351573, 0.8786796564403573, 0.5, 35.55025253169418, 44.33704909609776, 34.68629150101526, 43.745166004060955, 57.82233047033633, 64.4608947565991, 71.81623381592644, 67.46699141100898, 58.90454557049506, 104.49642866253178, 189.47813869930206, 200.8603896932106, 157.53701320234777, 140.5761184457488, 152.4928573250635, 124.0344878854061, 71.2954185357551, 27.69491347236681, 8.893398282201785, 5.636038969321072, 39.77207793864214, 41.52943725152286, 33.02943725152286, 40.49390334559011, 48.39339828220179, 53.458369439657375, 76.11522368914976, 72.0649711574556, 34.979184719828694, 44.4522727852475, 102.58831175456861, 129.33957441303943, 118.08831175456858, 157.70963209812822, 186.90811690796323, 135.5441558772843, 62.40811690796321, 25.307611844574883, 16.5, 10.5));
  });
});
*/
